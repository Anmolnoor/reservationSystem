{"version":3,"sources":["features/customerSlice.ts","components/CustomerCard.tsx","features/reservationSlice.ts","components/ReservationsCard.tsx","App.tsx","reportWebVitals.ts","app/store.ts","index.tsx"],"names":["customerSlice","createSlice","name","initialState","values","reducers","addCustomer","state","action","push","payload","addFoodToCustomer","forEach","customer","id","food","removeCustomer","filter","actions","CustomerCard","useState","customerInput","setCustomerInput","dispatch","useDispatch","className","map","value","onChange","e","target","onClick","reservationSlice","getReservations","removeReservation","splice","ReservationsCard","index","uuid","App","reservationsInput","setReservationsInput","Reservations","useSelector","reservations","Customer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c132b5a4.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\ninterface Customer {\n    id: string;\n    name: string;\n    food: string[];\n}\n\ninterface CustomerState {\n    values: Customer[];\n}\n\ninterface AddFoodToCustomer {\n    id: string;\n    food: string }\n\nconst initialState: CustomerState = {\n    values: [],\n}\n\nexport const customerSlice = createSlice({\n    name: \"customer\",\n    initialState,\n    reducers: {\n        addCustomer: (state, action: PayloadAction<Customer>) => {\n            state.values.push(action.payload);\n        },\n        addFoodToCustomer : (state, action: PayloadAction<AddFoodToCustomer>) => {\n            state.values.forEach(customer => {\n                if (customer.id === action.payload.id) {\n                    customer.food.push(action.payload.food);\n                }\n            } )\n        },\n        removeCustomer: (state, action: PayloadAction<string>) => {\n            state.values = state.values.filter(customer => customer.id !== action.payload);\n        }\n    }\n});\n\nexport const { addCustomer, addFoodToCustomer, removeCustomer } = customerSlice.actions;\n\nexport default customerSlice.reducer;\nexport type RootState = ReturnType<typeof customerSlice.reducer>;\nexport type AppDispatch = typeof customerSlice.actions;","import React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { addFoodToCustomer, removeCustomer, RootState } from '../features/customerSlice';\n\ninterface CustomerCardProps {\n    name: string,\n    id: string,\n    food: string[],\n}\n\nexport default function CustomerCard({name, id, food}: CustomerCardProps) {\n\n    const [customerInput, setCustomerInput] = useState(\"\");\n    const dispatch = useDispatch();\n    return (\n        <div className=\"customer-food-card-container\" key={id}>\n            <p>{name}</p>\n            <div className=\"customer-foods-container\">\n                <div className=\"customer-food\">\n                    {food.map((food) => {\n                        return <p>{food}</p>})}\n                    </div>\n              <div className=\"customer-food-input-container\">\n                <input value={customerInput} onChange={(e)=>{\n                    setCustomerInput(e.target.value)\n                }} />\n                <button onClick={()=>{\n                    if(!customerInput)return;\n\n                    dispatch(addFoodToCustomer({id, food: customerInput}))\n\n                    setCustomerInput(\"\");\n                }} >Add</button>\n              </div>\n            </div>\n            <div  onClick={()=>{dispatch(removeCustomer(id))}}\n             className=\"customer-food-input-btn\">Delete</div>\n          </div>\n    )\n}\n","import {createSlice, PayloadAction} from '@reduxjs/toolkit';\n\ninterface ReservationState {\n    value : string[];\n\n    \n}\n\nconst initialState: ReservationState = {\n    value: [],\n\n} \n\nexport const reservationSlice = createSlice({\n    name: 'reservation',\n    initialState,\n    reducers: {\n        getReservations: (state, action: PayloadAction<string>) => {\n                state.value.push(action.payload);\n        },\n        removeReservation: (state, action: PayloadAction<number>) => {\n            state.value.splice(action.payload, 1);\n        }\n    }\n});\n\nexport const {getReservations, removeReservation } = reservationSlice.actions;\n\nexport default reservationSlice.reducer;","import React from 'react'\nimport { useDispatch } from 'react-redux';\nimport { addCustomer } from '../features/customerSlice';\nimport { removeReservation } from '../features/reservationSlice';\nimport {v4 as uuid} from 'uuid';\n\ninterface ReservationsCardProps {\n    name: string,\n    index: number,\n}\n\nexport default function ReservationsCard({name, index}: ReservationsCardProps) {\n\n    const dispatch = useDispatch();\n    return (\n        <div onClick={() => {dispatch(removeReservation(index))\n        dispatch(addCustomer({\n            id : uuid(),\n            name,\n            food : [ ],\n        }))\n        }}  className=\"reservation-card-container\">{name}</div>\n    )\n}\n","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport \"./App.css\";\nimport { RootState } from \"./app/store\";\nimport CustomerCard from \"./components/CustomerCard\";\nimport ReservationsCard from \"./components/ReservationsCard\";\nimport { getReservations } from \"./features/reservationSlice\";\n\nfunction App() {\n\n  const [reservationsInput, setReservationsInput] = useState(\"\");\n  const dispatch = useDispatch();\n  const Reservations = useSelector((state: RootState) => state.reservations.value);\n  const Customer = useSelector((state: RootState) => state.customer.values);\n\n  const handleReservations = ()=>{\n    if(!reservationsInput) return \n    \n    dispatch(getReservations(reservationsInput));\n    setReservationsInput(\"\");\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"reservation-container\">\n          <div>\n            <h5 className=\"reservation-header\">Reservations</h5>\n            <div className=\"reservation-cards-container\">\n              {Reservations.map((name: string, index: number) => (\n                <ReservationsCard name={name} index={index} />\n              ))}\n            </div>\n          </div>\n          <div className=\"reservation-input-container\">\n            <input value={reservationsInput} onChange={(e)=>{setReservationsInput(e.target.value)}} />\n            <button onClick={handleReservations}>Add</button>\n          </div>\n        </div>\n        <div className=\"customer-food-container\">\n          {\n            Customer.map((customer) => {\n              return <CustomerCard id={customer.id} name={customer.name} food={customer.food} />\n            })}\n\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from \"@reduxjs/toolkit\"\nimport reservationSlice  from \"../features/reservationSlice\"\nimport customerSlice  from \"../features/customerSlice\"\n\nexport const store = configureStore({\n    reducer: {\n        reservations: reservationSlice,\n        customer: customerSlice\n    }\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\"\nimport { store } from './app/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}